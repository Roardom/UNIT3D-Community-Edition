// Generated by diesel_ext

#![allow(unused)]
#![allow(clippy::all)]

use diesel::{
    associations::{Associations, Identifiable},
    deserialize::Queryable,
    sql_types::*,
    Selectable,
};

use bigdecimal::BigDecimal;
use chrono::NaiveDateTime;
use serde::Serialize;

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::featured_torrents)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(Torrent))]
#[diesel(belongs_to(User))]
pub struct FeaturedTorrent {
    pub id: u32,
    pub user_id: u32,
    pub torrent_id: u32,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::groups)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct Group {
    pub id: i32,
    pub name: String,
    pub slug: String,
    pub position: i32,
    pub level: i32,
    pub download_slots: Option<i32>,
    pub description: Option<String>,
    pub color: String,
    pub icon: String,
    pub effect: String,
    pub is_internal: bool,
    pub is_editor: bool,
    pub is_owner: bool,
    pub is_admin: bool,
    pub is_modo: bool,
    pub is_trusted: bool,
    pub is_immune: bool,
    pub is_freeleech: bool,
    pub is_double_upload: bool,
    pub is_refundable: bool,
    pub can_upload: bool,
    pub is_incognito: bool,
    pub autogroup: bool,
    pub min_uploaded: Option<u64>,
    pub min_seedsize: Option<u64>,
    pub min_avg_seedtime: Option<u64>,
    pub min_ratio: Option<BigDecimal>,
    pub min_age: Option<u64>,
    pub system_required: bool,
    pub min_uploads: Option<u64>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::notifications)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User, foreign_key = notifiable_id))]
pub struct Notification {
    pub id: String,
    pub type_: String,
    pub notifiable_id: u32,
    pub notifiable_type: String,
    pub data: String,
    pub read_at: Option<NaiveDateTime>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::pages)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
pub struct Page {
    pub id: i32,
    pub name: Option<String>,
    pub content: Option<String>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::participants)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User))]
pub struct Participant {
    pub id: u32,
    pub conversation_id: u32,
    pub user_id: u32,
    pub read: bool,
    pub deleted_at: Option<NaiveDateTime>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::peers)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User))]
#[diesel(belongs_to(Torrent))]
pub struct Peer {
    pub id: u64,
    pub peer_id: Vec<u8>,
    pub ip: Vec<u8>,
    pub port: u16,
    pub agent: String,
    pub uploaded: u64,
    pub downloaded: u64,
    pub left: u64,
    pub seeder: bool,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub torrent_id: u32,
    pub user_id: u32,
    pub connectable: bool,
    pub active: bool,
    pub visible: bool,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::tickets)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User))]
pub struct Ticket {
    pub id: u64,
    pub user_id: u32,
    pub category_id: i32,
    pub priority_id: i32,
    pub staff_id: Option<u32>,
    pub user_read: Option<i8>,
    pub staff_read: Option<i8>,
    pub subject: String,
    pub body: String,
    pub closed_at: Option<NaiveDateTime>,
    pub reminded_at: Option<NaiveDateTime>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub deleted_at: Option<NaiveDateTime>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::torrents)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User))]
pub struct Torrent {
    pub id: u32,
    pub name: String,
    pub description: String,
    pub mediainfo: Option<String>,
    pub bdinfo: Option<String>,
    pub file_name: String,
    pub num_file: i32,
    pub folder: Option<String>,
    pub size: f64,
    pub nfo: Option<Vec<u8>>,
    pub leechers: i32,
    pub seeders: i32,
    pub times_completed: i32,
    pub category_id: Option<i32>,
    pub user_id: u32,
    pub imdb: u32,
    pub tvdb: u32,
    pub tmdb: u32,
    pub mal: u32,
    pub igdb: String,
    pub season_number: Option<i32>,
    pub episode_number: Option<i32>,
    pub stream: bool,
    pub free: i16,
    pub doubleup: bool,
    pub refundable: bool,
    pub highspeed: bool,
    pub featured: bool,
    pub status: i16,
    pub moderated_at: Option<NaiveDateTime>,
    pub moderated_by: Option<i32>,
    pub anon: i16,
    pub sticky: i16,
    pub sd: bool,
    pub internal: bool,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub bumped_at: Option<NaiveDateTime>,
    pub deleted_at: Option<NaiveDateTime>,
    pub fl_until: Option<NaiveDateTime>,
    pub du_until: Option<NaiveDateTime>,
    pub release_year: Option<u16>,
    pub type_id: i32,
    pub resolution_id: Option<i32>,
    pub distributor_id: Option<i32>,
    pub region_id: Option<i32>,
    pub personal_release: i32,
    pub balance: Option<i64>,
    pub balance_offset: Option<i64>,
    pub info_hash: Vec<u8>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::user_notifications)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User))]
pub struct UserNotification {
    pub id: i32,
    pub user_id: u32,
    pub block_notifications: bool,
    pub show_bon_gift: bool,
    pub show_mention_forum_post: bool,
    pub show_mention_article_comment: bool,
    pub show_mention_request_comment: bool,
    pub show_mention_torrent_comment: bool,
    pub show_subscription_topic: bool,
    pub show_subscription_forum: bool,
    pub show_forum_topic: bool,
    pub show_following_upload: bool,
    pub show_request_bounty: bool,
    pub show_request_comment: bool,
    pub show_request_fill: bool,
    pub show_request_fill_approve: bool,
    pub show_request_fill_reject: bool,
    pub show_request_claim: bool,
    pub show_request_unclaim: bool,
    pub show_torrent_comment: bool,
    pub show_torrent_tip: bool,
    pub show_torrent_thank: bool,
    pub show_account_follow: bool,
    pub show_account_unfollow: bool,
    pub json_account_groups: serde_json::Value,
    pub json_bon_groups: serde_json::Value,
    pub json_mention_groups: serde_json::Value,
    pub json_request_groups: serde_json::Value,
    pub json_torrent_groups: serde_json::Value,
    pub json_forum_groups: serde_json::Value,
    pub json_following_groups: serde_json::Value,
    pub json_subscription_groups: serde_json::Value,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::user_settings)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User))]
pub struct UserSetting {
    pub id: u32,
    pub user_id: u32,
    pub censor: bool,
    pub chat_hidden: bool,
    pub locale: String,
    pub style: u8,
    pub torrent_layout: u8,
    pub torrent_filters: bool,
    pub custom_css: Option<String>,
    pub standalone_css: Option<String>,
    pub show_poster: bool,
    pub torrent_sort_field: String,
    pub torrent_search_autofocus: bool,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::users)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(Group))]
pub struct User {
    pub id: u32,
    pub username: String,
    pub email: String,
    pub password: String,
    pub two_factor_secret: Option<String>,
    pub two_factor_recovery_codes: Option<String>,
    pub two_factor_confirmed_at: Option<NaiveDateTime>,
    pub passkey: String,
    pub group_id: i32,
    pub active: bool,
    pub uploaded: u64,
    pub downloaded: u64,
    pub image: Option<String>,
    pub title: Option<String>,
    pub about: Option<String>,
    pub signature: Option<String>,
    pub fl_tokens: u32,
    pub seedbonus: BigDecimal,
    pub invites: u32,
    pub hitandruns: u32,
    pub rsskey: String,
    pub chatroom_id: u32,
    pub read_rules: bool,
    pub can_chat: bool,
    pub can_comment: bool,
    pub can_download: bool,
    pub can_request: bool,
    pub can_invite: bool,
    pub can_upload: bool,
    pub remember_token: Option<String>,
    pub api_token: Option<String>,
    pub last_login: Option<NaiveDateTime>,
    pub last_action: Option<NaiveDateTime>,
    pub disabled_at: Option<NaiveDateTime>,
    pub deleted_by: Option<u32>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
    pub chat_status_id: u32,
    pub deleted_at: Option<NaiveDateTime>,
    pub own_flushes: i8,
    pub email_verified_at: Option<NaiveDateTime>,
}

#[derive(Clone, Queryable, Selectable, Identifiable, Associations, Debug, PartialEq, Serialize)]
#[diesel(table_name = crate::database::schema::warnings)]
#[diesel(check_for_backend(diesel::mysql::Mysql))]
#[diesel(belongs_to(User))]
pub struct Warning {
    pub id: u32,
    pub user_id: u32,
    pub warned_by: u32,
    pub torrent: Option<u32>,
    pub reason: String,
    pub expires_on: Option<NaiveDateTime>,
    pub active: bool,
    pub deleted_by: Option<u32>,
    pub deleted_at: Option<NaiveDateTime>,
    pub created_at: Option<NaiveDateTime>,
    pub updated_at: Option<NaiveDateTime>,
}
